
#include <Rcpp.h>

#include "abseil_exports.h"


extern "C" SEXP optimizeFromR(const SEXP par_, const SEXP objective_, const SEXP gradient_,
			      const SEXP tol_, const SEXP maxIter_
) {
  const Rcpp::Function objectiveFun(objective_), gradientFun(gradient_);
  const double tol(Rcpp::as<double>(tol_));
  const int maxIter(Rcpp::as<int>(maxIter_));
  
  bool converged = false;
  double currentObjective, previousObjective;
  Rcpp::NumericVector par(Rcpp::clone(par_));
  
  abseil::AdaM<Rcpp::NumericVector> sgd(par);
  
  previousObjective = objectiveFun(par);
  while (!converged && sgd.iteration() < maxIter) {
    sgd.update<Rcpp::NumericVector, Rcpp::NumericVector>(par, gradientFun);
    currentObjective = objectiveFun(par);
    sgd.eta(sgd.eta() * ((currentObjective <= previousObjective) ? 1.1 : 0.5));
    converged = sgd.converged(tol) && (currentObjective <= previousObjective);
  }
  
  return Rcpp::wrap(Rcpp::List::create(
      Rcpp::Named("par") = par,
      Rcpp::Named("value") = currentObjective,
      Rcpp::Named("iteration") = sgd.iteration(),
      Rcpp::Named("convergence") = converged)
    );
};
